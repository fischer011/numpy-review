# -*- coding: utf-8 -*-
"""Numpy_math_review.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iUe0kC8wfmV2xlvDO_0zRlTNJR4nQfPH
"""

import numpy as np
v = np.array([1,1])
v
v.shape

m = np.array([[3,2], [3,2]])
m
m[0,[0]]

import matplotlib.pyplot as plt

plt.xlim(0, 3)
plt.ylim(0, 3)

d0=m[0]
d1=m[1]
dx=d0[0]
dy=d0[1]

plt.arrow(0, 0, dx, dy, head_width=0.05, head_length=0.1)

plt.xlim(0, 3)
plt.ylim(0, 3)

plt.arrow(0, 0, v[0], v[1], head_width=0.05, head_length=0.1)

"""L2 norm formula is Euclidean distance (hypotenuse of triangle formed by x length and y length of vector)

$$||x||_{2} = \sqrt{x_{1}^{2} + x_{2}^{2} +\cdots + x_{n}^{2}}$$

For v: 1^2 + 1^2 = 2;
sqrt(2) ~ 1.41
"""

np.sum(v ** 2)

np.sqrt(np.sum(v ** 2))

v3 = np.array([0, 1, 2])

fig1 = plt.figure()
ax = fig1.add_subplot(111, projection='3d')

ax.set_xlim([0, 3])
ax.set_ylim([0, 3])
ax.set_zlim([0, 3])

ax.quiver(0, 0, 0, v3[0], v3[1], v3[2], length=1)

fig2 = plt.figure()
ax = fig2.add_subplot(111, projection='3d')

ax.set_xlim([0, 3])
ax.set_ylim([0, 3])
ax.set_zlim([0, 3])

ax.quiver(0, 0, 0, v3[0], v3[1], v3[2], length=1)

v5 = np.array([0, 1, 2, 3, 4])

"""Scaling vectors"""

v_half = np.array([2,1]) * 0.5
v_half

"""Adding vectors"""

v_add  = np.array([1,1]) + v_half
v_add

"""Basis vectors

Canonical basis vectors:

0,1

1,0
"""

v1 = np.array([0,1])
v2 = np.array([1,0])

# Can use basis vectors to reach any point in 2D space
# 0.3, 1

v1 + v2 * 0.3

# Basis vectors are orthogonal to each other
# So dot product equals zero

np.dot(v1,v2)

"""You can change basis vectors

Important usage in ML and DL
"""

M = np.array([[0,1,2], [1,0,2], [3,1,0]])
M

"""Matrix variable is uppercase by convention in programming and math"""

M.shape

"""Linear regression formula

$\hat{y} = wx + b$
"""

import pandas as pd

# Read in the data
data = pd.read_csv("/content/clean_weather.csv", index_col=0)
# Fill missing data with past data
# Fill NA/NaN values by propagating the last valid observation to next valid.
data = data.ffill()

data.head(5)

"""$\hat{y} = w_1 x_1 + w_2 x_2 + w_3 x_3 + b$

---


Matrix multiplication
"""

X = data[['tmax', 'tmin', 'rain']].iloc[:3].to_numpy()
X

X.shape

X_T = X.T
X_T

w = np.array([0.7, 0.3, 1])
w.shape

"""Reshaping w vector (1D) to W matrix with 3 rows and 1 column.

Reshape requires same # of elements in original array and new array.
"""

W = w.reshape(3,1)
W

X @ W

np.dot(X,W)

np.dot([2j, 2 + 3j], [2j, 3j])

np.dot([2,3], [2,3])

np.dot([1j,1j], [1j,1j])

b = np.array([10])
# b is bias given for example, not calculated

Y = X @ W + b
Y

"""Slope-intercept formula relation

$y = mx + b$

---

Normal Equation Method vs Gradient Descent

$$W = (X^T X)^{-1} X^T Y$$
"""

norm = ((X_T * X) ** -1) * X_T * Y
norm





